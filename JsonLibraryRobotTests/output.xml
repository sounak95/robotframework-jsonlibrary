<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2.1 (Python 3.7.3 on win32)" generated="20200205 16:54:05.929" rpa="false">
<suite id="s1" name="JsonLibraryRobotTests" source="D:\UFT_Project_Workspace\JsonLibraryRobotTests">
<suite id="s1-s1" name="JsonLibrary" source="D:\UFT_Project_Workspace\JsonLibraryRobotTests\JsonLibrary">
<suite id="s1-s1-s1" name="JsonLibrary" source="D:\UFT_Project_Workspace\JsonLibraryRobotTests\JsonLibrary\JsonLibrary.robot">
<test id="s1-s1-s1-t1" name="Add Object To Json">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:07.027" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.025" endtime="20200205 16:54:07.027"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:07.030" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.028" endtime="20200205 16:54:07.030"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:07.033" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.032" endtime="20200205 16:54:07.033"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.036" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.035" endtime="20200205 16:54:07.036"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.038" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.037" endtime="20200205 16:54:07.039"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.041" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.040" endtime="20200205 16:54:07.041"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:07.024" endtime="20200205 16:54:07.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>latitude=13.1234</arg>
<arg>longitude=130.1234</arg>
</arguments>
<assign>
<var>${object_to_add}</var>
</assign>
<msg timestamp="20200205 16:54:07.044" level="INFO">${object_to_add} = {'latitude': '13.1234', 'longitude': '130.1234'}</msg>
<status status="PASS" starttime="20200205 16:54:07.043" endtime="20200205 16:54:07.044"></status>
</kw>
<kw name="Add Object To Json" library="JsonLibrary">
<doc>Adds a dictionary object to json_data using json_path</doc>
<arguments>
<arg>${json_data}</arg>
<arg>$..address</arg>
<arg>${object_to_add}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:07.105" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.046" endtime="20200205 16:54:07.105"></status>
</kw>
<kw name="Dictionary Should Contain Sub Dictionary" library="Collections">
<doc>Fails unless all items in ``dict2`` are found from ``dict1``.</doc>
<arguments>
<arg>${json_data['address']}</arg>
<arg>${object_to_add}</arg>
</arguments>
<status status="PASS" starttime="20200205 16:54:07.107" endtime="20200205 16:54:07.108"></status>
</kw>
<kw name="Pretty Print Json" library="JsonLibrary">
<doc>Returns formatted JSON string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:07.111" level="INFO">${json_data} = {
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": false,
  "address": {
    "streetAddress": "naist street...</msg>
<status status="PASS" starttime="20200205 16:54:07.110" endtime="20200205 16:54:07.111"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.113" level="INFO">{
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": false,
  "address": {
    "streetAddress": "naist street",
    "city": "Dubai",
    "postalCode": "630-0192",
    "Boolean": true,
    "latitude": "13.1234",
    "longitude": "130.1234"
  },
  "officeaddress": {
    "streetAddress": "brooklyn street",
    "city": "newyork",
    "postalCode": "994-3332"
  },
  "phoneNumbers": [
    {
      "type": "iPhone",
      "number": 9045678888
    },
    {
      "type": "home",
      "number": 9045678888.0
    }
  ]
}</msg>
<status status="PASS" starttime="20200205 16:54:07.112" endtime="20200205 16:54:07.113"></status>
</kw>
<doc>Adding a dictionary object to json_data using json_path</doc>
<status status="PASS" starttime="20200205 16:54:07.022" endtime="20200205 16:54:07.114" critical="yes"></status>
</test>
<test id="s1-s1-s1-t2" name="String to Json">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:07.119" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.118" endtime="20200205 16:54:07.120"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:07.130" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.122" endtime="20200205 16:54:07.137"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:07.148" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.146" endtime="20200205 16:54:07.149"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.153" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.151" endtime="20200205 16:54:07.153"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.157" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.155" endtime="20200205 16:54:07.158"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.161" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.160" endtime="20200205 16:54:07.162"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:07.116" endtime="20200205 16:54:07.162"></status>
</kw>
<kw name="Json To String" library="JsonLibrary">
<doc>Serialize JSON structure into string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${Json_String}</var>
</assign>
<msg timestamp="20200205 16:54:07.166" level="INFO">${Json_String} = {"firstName": "John", "lastName": "doe", "age": 26, "gender": "male", "favoriteColor": ["blue", "black"], "isMarried": false, "address": {"streetAddress": "naist street", "city": "Dubai", "postalCode"...</msg>
<status status="PASS" starttime="20200205 16:54:07.165" endtime="20200205 16:54:07.166"></status>
</kw>
<kw name="String To Json" library="JsonLibrary">
<doc>Deserialize string into JSON structure.</doc>
<arguments>
<arg>${Json_String}</arg>
</arguments>
<assign>
<var>${String}</var>
</assign>
<msg timestamp="20200205 16:54:07.170" level="INFO">${String} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.168" endtime="20200205 16:54:07.170"></status>
</kw>
<kw name="Pretty Print Json" library="JsonLibrary">
<doc>Returns formatted JSON string.</doc>
<arguments>
<arg>${String}</arg>
</arguments>
<assign>
<var>${print}</var>
</assign>
<msg timestamp="20200205 16:54:07.174" level="INFO">${print} = {
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": false,
  "address": {
    "streetAddress": "naist street...</msg>
<status status="PASS" starttime="20200205 16:54:07.172" endtime="20200205 16:54:07.174"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${print}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.178" level="INFO">{
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": false,
  "address": {
    "streetAddress": "naist street",
    "city": "Dubai",
    "postalCode": "630-0192",
    "Boolean": true
  },
  "officeaddress": {
    "streetAddress": "brooklyn street",
    "city": "newyork",
    "postalCode": "994-3332"
  },
  "phoneNumbers": [
    {
      "type": "iPhone",
      "number": 9045678888
    },
    {
      "type": "home",
      "number": 9045678888.0
    }
  ]
}</msg>
<status status="PASS" starttime="20200205 16:54:07.176" endtime="20200205 16:54:07.178"></status>
</kw>
<doc>Deserialize string into JSON structure.</doc>
<status status="PASS" starttime="20200205 16:54:07.115" endtime="20200205 16:54:07.179" critical="yes"></status>
</test>
<test id="s1-s1-s1-t3" name="Json to String">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:07.187" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.185" endtime="20200205 16:54:07.188"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:07.191" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.189" endtime="20200205 16:54:07.191"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:07.196" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.193" endtime="20200205 16:54:07.196"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.200" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.198" endtime="20200205 16:54:07.201"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.204" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.203" endtime="20200205 16:54:07.205"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.208" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.206" endtime="20200205 16:54:07.208"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:07.182" endtime="20200205 16:54:07.209"></status>
</kw>
<kw name="Json To String" library="JsonLibrary">
<doc>Serialize JSON structure into string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${Json_String}</var>
</assign>
<msg timestamp="20200205 16:54:07.212" level="INFO">${Json_String} = {"firstName": "John", "lastName": "doe", "age": 26, "gender": "male", "favoriteColor": ["blue", "black"], "isMarried": false, "address": {"streetAddress": "naist street", "city": "Dubai", "postalCode"...</msg>
<status status="PASS" starttime="20200205 16:54:07.211" endtime="20200205 16:54:07.213"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Json_String}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.216" level="INFO">{"firstName": "John", "lastName": "doe", "age": 26, "gender": "male", "favoriteColor": ["blue", "black"], "isMarried": false, "address": {"streetAddress": "naist street", "city": "Dubai", "postalCode": "630-0192", "Boolean": true}, "officeaddress": {"streetAddress": "brooklyn street", "city": "newyork", "postalCode": "994-3332"}, "phoneNumbers": [{"type": "iPhone", "number": 9045678888}, {"type": "home", "number": 9045678888.0}]}</msg>
<status status="PASS" starttime="20200205 16:54:07.215" endtime="20200205 16:54:07.217"></status>
</kw>
<doc>Serialize JSON structure into string.</doc>
<status status="PASS" starttime="20200205 16:54:07.181" endtime="20200205 16:54:07.218" critical="yes"></status>
</test>
<test id="s1-s1-s1-t4" name="Get Value From Json">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:07.224" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.222" endtime="20200205 16:54:07.224"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:07.228" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.226" endtime="20200205 16:54:07.228"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:07.231" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.230" endtime="20200205 16:54:07.232"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.234" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.233" endtime="20200205 16:54:07.235"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.238" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.237" endtime="20200205 16:54:07.238"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.241" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.240" endtime="20200205 16:54:07.241"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:07.220" endtime="20200205 16:54:07.242"></status>
</kw>
<kw name="Get Value From Json" library="JsonLibrary">
<doc>Gets Value From Json data using JSONPath</doc>
<arguments>
<arg>${json_data}</arg>
<arg>$..phoneNumbers[0].number</arg>
</arguments>
<assign>
<var>${values}</var>
</assign>
<msg timestamp="20200205 16:54:07.316" level="INFO">${values} = 9045678888</msg>
<status status="PASS" starttime="20200205 16:54:07.243" endtime="20200205 16:54:07.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${values}</arg>
<arg>9045678888</arg>
</arguments>
<status status="PASS" starttime="20200205 16:54:07.318" endtime="20200205 16:54:07.321"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.325" level="INFO">9045678888</msg>
<status status="PASS" starttime="20200205 16:54:07.324" endtime="20200205 16:54:07.326"></status>
</kw>
<doc>Gets Value From Json data using JSONPath</doc>
<status status="PASS" starttime="20200205 16:54:07.219" endtime="20200205 16:54:07.328" critical="yes"></status>
</test>
<test id="s1-s1-s1-t5" name="Get Json Elements">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:07.337" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.335" endtime="20200205 16:54:07.337"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:07.342" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.340" endtime="20200205 16:54:07.342"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:07.346" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.344" endtime="20200205 16:54:07.347"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.350" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.348" endtime="20200205 16:54:07.351"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.354" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.353" endtime="20200205 16:54:07.354"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.359" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.357" endtime="20200205 16:54:07.362"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:07.331" endtime="20200205 16:54:07.365"></status>
</kw>
<kw name="Json To String" library="JsonLibrary">
<doc>Serialize JSON structure into string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:07.369" level="INFO">${json_data} = {"firstName": "John", "lastName": "doe", "age": 26, "gender": "male", "favoriteColor": ["blue", "black"], "isMarried": false, "address": {"streetAddress": "naist street", "city": "Dubai", "postalCode"...</msg>
<status status="PASS" starttime="20200205 16:54:07.367" endtime="20200205 16:54:07.370"></status>
</kw>
<kw name="Get Json Elements" library="JsonLibrary">
<doc>Get list of elements from json_string for matching expression.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>$..number</arg>
</arguments>
<assign>
<var>@{values}</var>
</assign>
<msg timestamp="20200205 16:54:07.475" level="INFO">@{values} = [ 9045678888 | 9045678888.0 ]</msg>
<status status="PASS" starttime="20200205 16:54:07.372" endtime="20200205 16:54:07.476"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${values}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.477" level="INFO">[9045678888, 9045678888.0]</msg>
<status status="PASS" starttime="20200205 16:54:07.477" endtime="20200205 16:54:07.478"></status>
</kw>
<doc>Gets Value From Json data using JSONPath</doc>
<status status="PASS" starttime="20200205 16:54:07.330" endtime="20200205 16:54:07.478" critical="yes"></status>
</test>
<test id="s1-s1-s1-t6" name="Select Json Objects">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:07.485" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.482" endtime="20200205 16:54:07.485"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:07.489" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.487" endtime="20200205 16:54:07.489"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:07.495" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.492" endtime="20200205 16:54:07.496"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.499" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.497" endtime="20200205 16:54:07.500"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.502" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.501" endtime="20200205 16:54:07.503"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.508" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.506" endtime="20200205 16:54:07.508"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:07.481" endtime="20200205 16:54:07.509"></status>
</kw>
<kw name="Json To String" library="JsonLibrary">
<doc>Serialize JSON structure into string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${Json_String}</var>
</assign>
<msg timestamp="20200205 16:54:07.514" level="INFO">${Json_String} = {"firstName": "John", "lastName": "doe", "age": 26, "gender": "male", "favoriteColor": ["blue", "black"], "isMarried": false, "address": {"streetAddress": "naist street", "city": "Dubai", "postalCode"...</msg>
<status status="PASS" starttime="20200205 16:54:07.513" endtime="20200205 16:54:07.515"></status>
</kw>
<kw name="Select Json Objects" library="JsonLibrary">
<doc>Return list of elements from json_string, matching expression.</doc>
<arguments>
<arg>${Json_String}</arg>
<arg>$..number</arg>
</arguments>
<assign>
<var>@{Json_Objects}</var>
</assign>
<msg timestamp="20200205 16:54:07.600" level="INFO">@{Json_Objects} = [ 9045678888 | 9045678888.0 ]</msg>
<status status="PASS" starttime="20200205 16:54:07.516" endtime="20200205 16:54:07.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>@{Json_Objects}[1]</arg>
<arg>9045678888.0</arg>
</arguments>
<msg timestamp="20200205 16:54:07.604" level="INFO">Argument types are:
&lt;class 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20200205 16:54:07.603" endtime="20200205 16:54:07.604"></status>
</kw>
<doc>Returns list of elements from json_string, matching expression.</doc>
<status status="PASS" starttime="20200205 16:54:07.479" endtime="20200205 16:54:07.606" critical="yes"></status>
</test>
<test id="s1-s1-s1-t7" name="Update Values To Json">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:07.614" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.612" endtime="20200205 16:54:07.615"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:07.618" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.616" endtime="20200205 16:54:07.618"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:07.622" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.620" endtime="20200205 16:54:07.622"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.625" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:07.624" endtime="20200205 16:54:07.626"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.631" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:07.627" endtime="20200205 16:54:07.640"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:07.654" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:07.642" endtime="20200205 16:54:07.655"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:07.610" endtime="20200205 16:54:07.656"></status>
</kw>
<kw name="Update Values To Json" library="JsonLibrary">
<doc>Updates value to json data. params needs to be passed using format jsonpath_expression=value.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>$..address.city=New York</arg>
<arg>$..isMarried=True</arg>
<arg>$..phoneNumbers[1].number=8.9</arg>
<arg>$..phoneNumbers[0].number=1234</arg>
<arg>$..address.city=New York</arg>
<arg>$..officeaddress.city=Los Angeles</arg>
<arg>$..address.Boolean=False</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.175" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', True), ('address', OrderedDict([('streetAddress', 'naist s...</msg>
<status status="PASS" starttime="20200205 16:54:07.658" endtime="20200205 16:54:08.176"></status>
</kw>
<kw name="Pretty Print Json" library="JsonLibrary">
<doc>Returns formatted JSON string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.179" level="INFO">${json_data} = {
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": true,
  "address": {
    "streetAddress": "naist street"...</msg>
<status status="PASS" starttime="20200205 16:54:08.177" endtime="20200205 16:54:08.180"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.182" level="INFO">{
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": true,
  "address": {
    "streetAddress": "naist street",
    "city": "New York",
    "postalCode": "630-0192",
    "Boolean": false
  },
  "officeaddress": {
    "streetAddress": "brooklyn street",
    "city": "Los Angeles",
    "postalCode": "994-3332"
  },
  "phoneNumbers": [
    {
      "type": "iPhone",
      "number": 1234
    },
    {
      "type": "home",
      "number": 8.9
    }
  ]
}</msg>
<status status="PASS" starttime="20200205 16:54:08.181" endtime="20200205 16:54:08.182"></status>
</kw>
<doc>Updates value to json data. params needs to be passed using format jsonpath_expression=value.</doc>
<status status="PASS" starttime="20200205 16:54:07.608" endtime="20200205 16:54:08.183" critical="yes"></status>
</test>
<test id="s1-s1-s1-t8" name="Update One Value To Json">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.188" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.187" endtime="20200205 16:54:08.188"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.191" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.190" endtime="20200205 16:54:08.191"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.194" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.193" endtime="20200205 16:54:08.195"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.197" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.196" endtime="20200205 16:54:08.197"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.199" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.199" endtime="20200205 16:54:08.200"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.202" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.201" endtime="20200205 16:54:08.202"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:08.185" endtime="20200205 16:54:08.203"></status>
</kw>
<kw name="Update Values To Json" library="JsonLibrary">
<doc>Updates value to json data. params needs to be passed using format jsonpath_expression=value.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>$..address.Boolean=False</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.247" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.204" endtime="20200205 16:54:08.247"></status>
</kw>
<kw name="Pretty Print Json" library="JsonLibrary">
<doc>Returns formatted JSON string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.249" level="INFO">${json_data} = {
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": false,
  "address": {
    "streetAddress": "naist street...</msg>
<status status="PASS" starttime="20200205 16:54:08.248" endtime="20200205 16:54:08.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.251" level="INFO">{
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": false,
  "address": {
    "streetAddress": "naist street",
    "city": "Dubai",
    "postalCode": "630-0192",
    "Boolean": false
  },
  "officeaddress": {
    "streetAddress": "brooklyn street",
    "city": "newyork",
    "postalCode": "994-3332"
  },
  "phoneNumbers": [
    {
      "type": "iPhone",
      "number": 9045678888
    },
    {
      "type": "home",
      "number": 9045678888.0
    }
  ]
}</msg>
<status status="PASS" starttime="20200205 16:54:08.251" endtime="20200205 16:54:08.252"></status>
</kw>
<doc>Updates one value to json data. params needs to be passed using format jsonpath_expression=value.</doc>
<status status="PASS" starttime="20200205 16:54:08.184" endtime="20200205 16:54:08.252" critical="yes"></status>
</test>
<test id="s1-s1-s1-t9" name="Update Json">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.257" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.256" endtime="20200205 16:54:08.257"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.261" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.259" endtime="20200205 16:54:08.262"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.264" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.263" endtime="20200205 16:54:08.265"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.267" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.266" endtime="20200205 16:54:08.267"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.271" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.268" endtime="20200205 16:54:08.273"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.275" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.274" endtime="20200205 16:54:08.275"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:08.254" endtime="20200205 16:54:08.276"></status>
</kw>
<kw name="Json To String" library="JsonLibrary">
<doc>Serialize JSON structure into string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${json_String}</var>
</assign>
<msg timestamp="20200205 16:54:08.279" level="INFO">${json_String} = {"firstName": "John", "lastName": "doe", "age": 26, "gender": "male", "favoriteColor": ["blue", "black"], "isMarried": false, "address": {"streetAddress": "naist street", "city": "Dubai", "postalCode"...</msg>
<status status="PASS" starttime="20200205 16:54:08.278" endtime="20200205 16:54:08.280"></status>
</kw>
<kw name="Update Json" library="JsonLibrary">
<doc>Replace the value in the JSON string.</doc>
<arguments>
<arg>${json_String}</arg>
<arg>$..age</arg>
<arg>77</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.375" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', '77'), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'nais...</msg>
<status status="PASS" starttime="20200205 16:54:08.281" endtime="20200205 16:54:08.375"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.378" level="INFO">OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', '77'), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist street'), ('city', 'Dubai'), ('postalCode', '630-0192'), ('Boolean', True)])), ('officeaddress', OrderedDict([('streetAddress', 'brooklyn street'), ('city', 'newyork'), ('postalCode', '994-3332')])), ('phoneNumbers', [OrderedDict([('type', 'iPhone'), ('number', 9045678888)]), OrderedDict([('type', 'home'), ('number', 9045678888.0)])])])</msg>
<status status="PASS" starttime="20200205 16:54:08.377" endtime="20200205 16:54:08.378"></status>
</kw>
<doc>Replaces the value in the JSON string.</doc>
<status status="PASS" starttime="20200205 16:54:08.253" endtime="20200205 16:54:08.379" critical="yes"></status>
</test>
<test id="s1-s1-s1-t10" name="Delete Object From Json">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.384" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.383" endtime="20200205 16:54:08.385"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.388" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.387" endtime="20200205 16:54:08.389"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.398" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.395" endtime="20200205 16:54:08.399"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.411" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.409" endtime="20200205 16:54:08.411"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.413" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.412" endtime="20200205 16:54:08.414"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.418" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.416" endtime="20200205 16:54:08.418"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:08.381" endtime="20200205 16:54:08.419"></status>
</kw>
<kw name="Delete Object From Json" library="JsonLibrary">
<doc>Deletes Object From Json data using json_path expression</doc>
<arguments>
<arg>${json_data}</arg>
<arg>$..address.streetAddress</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.471" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('city', 'Dubai'), ('post...</msg>
<status status="PASS" starttime="20200205 16:54:08.420" endtime="20200205 16:54:08.472"></status>
</kw>
<kw name="Dictionary Should Not Contain Key" library="Collections">
<doc>Fails if ``key`` is found from ``dictionary``.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>streetAddress</arg>
</arguments>
<status status="PASS" starttime="20200205 16:54:08.475" endtime="20200205 16:54:08.476"></status>
</kw>
<kw name="Pretty Print Json" library="JsonLibrary">
<doc>Returns formatted JSON string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.481" level="INFO">${json_data} = {
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": false,
  "address": {
    "city": "Dubai",
    "postalCo...</msg>
<status status="PASS" starttime="20200205 16:54:08.479" endtime="20200205 16:54:08.481"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.485" level="INFO">{
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": false,
  "address": {
    "city": "Dubai",
    "postalCode": "630-0192",
    "Boolean": true
  },
  "officeaddress": {
    "streetAddress": "brooklyn street",
    "city": "newyork",
    "postalCode": "994-3332"
  },
  "phoneNumbers": [
    {
      "type": "iPhone",
      "number": 9045678888
    },
    {
      "type": "home",
      "number": 9045678888.0
    }
  ]
}</msg>
<status status="PASS" starttime="20200205 16:54:08.484" endtime="20200205 16:54:08.486"></status>
</kw>
<doc>Deletes Object From Json data using json_path expression</doc>
<status status="PASS" starttime="20200205 16:54:08.379" endtime="20200205 16:54:08.487" critical="yes"></status>
</test>
<test id="s1-s1-s1-t11" name="PrettyPrintJson">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.493" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.491" endtime="20200205 16:54:08.494"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.498" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.496" endtime="20200205 16:54:08.499"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.502" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.500" endtime="20200205 16:54:08.503"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.506" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.505" endtime="20200205 16:54:08.506"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.510" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.508" endtime="20200205 16:54:08.511"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.515" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.514" endtime="20200205 16:54:08.516"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:08.489" endtime="20200205 16:54:08.517"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.521" level="INFO">OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist street'), ('city', 'Dubai'), ('postalCode', '630-0192'), ('Boolean', True)])), ('officeaddress', OrderedDict([('streetAddress', 'brooklyn street'), ('city', 'newyork'), ('postalCode', '994-3332')])), ('phoneNumbers', [OrderedDict([('type', 'iPhone'), ('number', 9045678888)]), OrderedDict([('type', 'home'), ('number', 9045678888.0)])])])</msg>
<status status="PASS" starttime="20200205 16:54:08.520" endtime="20200205 16:54:08.522"></status>
</kw>
<kw name="Pretty Print Json" library="JsonLibrary">
<doc>Returns formatted JSON string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.525" level="INFO">${json_data} = {
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": false,
  "address": {
    "streetAddress": "naist street...</msg>
<status status="PASS" starttime="20200205 16:54:08.524" endtime="20200205 16:54:08.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.529" level="INFO">{
  "firstName": "John",
  "lastName": "doe",
  "age": 26,
  "gender": "male",
  "favoriteColor": [
    "blue",
    "black"
  ],
  "isMarried": false,
  "address": {
    "streetAddress": "naist street",
    "city": "Dubai",
    "postalCode": "630-0192",
    "Boolean": true
  },
  "officeaddress": {
    "streetAddress": "brooklyn street",
    "city": "newyork",
    "postalCode": "994-3332"
  },
  "phoneNumbers": [
    {
      "type": "iPhone",
      "number": 9045678888
    },
    {
      "type": "home",
      "number": 9045678888.0
    }
  ]
}</msg>
<status status="PASS" starttime="20200205 16:54:08.528" endtime="20200205 16:54:08.529"></status>
</kw>
<doc>Returns formatted JSON string.</doc>
<status status="PASS" starttime="20200205 16:54:08.488" endtime="20200205 16:54:08.530" critical="yes"></status>
</test>
<test id="s1-s1-s1-t12" name="JsonSchema Validation from file">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.536" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.534" endtime="20200205 16:54:08.536"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.543" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.540" endtime="20200205 16:54:08.543"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.546" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.544" endtime="20200205 16:54:08.546"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.550" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.548" endtime="20200205 16:54:08.551"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.554" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.553" endtime="20200205 16:54:08.555"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.560" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.558" endtime="20200205 16:54:08.561"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:08.532" endtime="20200205 16:54:08.562"></status>
</kw>
<kw name="Validate Jsonschema" library="JsonLibrary">
<doc>Validate JSON data according to schema.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<status status="PASS" starttime="20200205 16:54:08.563" endtime="20200205 16:54:08.567"></status>
</kw>
<doc>Validate JSON data according to schema. where both are taken from filepath</doc>
<status status="PASS" starttime="20200205 16:54:08.531" endtime="20200205 16:54:08.568" critical="yes"></status>
</test>
<test id="s1-s1-s1-t13" name="JsonSchema Validation for String">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.574" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.572" endtime="20200205 16:54:08.574"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.577" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.576" endtime="20200205 16:54:08.577"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.580" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.578" endtime="20200205 16:54:08.580"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.582" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.581" endtime="20200205 16:54:08.582"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.583" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.583" endtime="20200205 16:54:08.583"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.587" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.585" endtime="20200205 16:54:08.588"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:08.571" endtime="20200205 16:54:08.589"></status>
</kw>
<kw name="Json To String" library="JsonLibrary">
<doc>Serialize JSON structure into string.</doc>
<arguments>
<arg>${JsonSchema}</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.591" level="INFO">${JsonSchema} = {"properties": {"name": {"type": "string"}, "price": {"type": "number", "minimum": 0}, "sku": {"description": "Stock Keeping Unit", "type": "integer"}}, "required": ["name", "price"]}</msg>
<status status="PASS" starttime="20200205 16:54:08.590" endtime="20200205 16:54:08.591"></status>
</kw>
<kw name="Json To String" library="JsonLibrary">
<doc>Serialize JSON structure into string.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.593" level="INFO">${Json_Schema_Data} = {"name": "eggs", "price": 20}</msg>
<status status="PASS" starttime="20200205 16:54:08.592" endtime="20200205 16:54:08.593"></status>
</kw>
<kw name="Validate Jsonschema" library="JsonLibrary">
<doc>Validate JSON data according to schema.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<status status="PASS" starttime="20200205 16:54:08.595" endtime="20200205 16:54:08.597"></status>
</kw>
<doc>Validate JSON data according to schema. where type of both are string</doc>
<status status="PASS" starttime="20200205 16:54:08.569" endtime="20200205 16:54:08.598" critical="yes"></status>
</test>
<test id="s1-s1-s1-t14" name="JsonSchema Validation for OrderedDict">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.601" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.600" endtime="20200205 16:54:08.602"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.604" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.603" endtime="20200205 16:54:08.604"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.607" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.606" endtime="20200205 16:54:08.607"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.609" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.608" endtime="20200205 16:54:08.609"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.610" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.610" endtime="20200205 16:54:08.610"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.613" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.612" endtime="20200205 16:54:08.613"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:08.599" endtime="20200205 16:54:08.614"></status>
</kw>
<kw name="Validate Jsonschema" library="JsonLibrary">
<doc>Validate JSON data according to schema.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<status status="PASS" starttime="20200205 16:54:08.615" endtime="20200205 16:54:08.616"></status>
</kw>
<doc>Validate JSON data according to schema. where type of both are OrderedDict</doc>
<status status="PASS" starttime="20200205 16:54:08.598" endtime="20200205 16:54:08.617" critical="yes"></status>
</test>
<test id="s1-s1-s1-t15" name="Select Json Elements">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.621" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.620" endtime="20200205 16:54:08.621"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.624" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.623" endtime="20200205 16:54:08.625"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.628" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.626" endtime="20200205 16:54:08.628"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.631" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.630" endtime="20200205 16:54:08.632"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.634" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.633" endtime="20200205 16:54:08.634"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.635" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.635" endtime="20200205 16:54:08.636"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:08.619" endtime="20200205 16:54:08.636"></status>
</kw>
<kw name="Json To String" library="JsonLibrary">
<doc>Serialize JSON structure into string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${json_String}</var>
</assign>
<msg timestamp="20200205 16:54:08.637" level="INFO">${json_String} = {"firstName": "John", "lastName": "doe", "age": 26, "gender": "male", "favoriteColor": ["blue", "black"], "isMarried": false, "address": {"streetAddress": "naist street", "city": "Dubai", "postalCode"...</msg>
<status status="PASS" starttime="20200205 16:54:08.637" endtime="20200205 16:54:08.638"></status>
</kw>
<kw name="Select Json Elements" library="JsonLibrary">
<doc>Returns list of elements from _json_string_ with matching expression.</doc>
<arguments>
<arg>${json_String}</arg>
<arg>.address</arg>
</arguments>
<assign>
<var>@{json_String}</var>
</assign>
<msg timestamp="20200205 16:54:08.640" level="INFO">@{json_String} = [ "streetAddress" : "naist street" | "city" : "Dubai" | "postalCode" : "630-0192" | "Boolean" : "True" ]</msg>
<status status="PASS" starttime="20200205 16:54:08.639" endtime="20200205 16:54:08.641"></status>
</kw>
<doc>Returns list of elements from _json_string_ with matching expression.</doc>
<status status="PASS" starttime="20200205 16:54:08.618" endtime="20200205 16:54:08.641" critical="yes"></status>
</test>
<test id="s1-s1-s1-t16" name="Json Element Should Exist">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.659" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.657" endtime="20200205 16:54:08.659"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.663" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.661" endtime="20200205 16:54:08.664"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.666" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.665" endtime="20200205 16:54:08.666"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.669" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.668" endtime="20200205 16:54:08.669"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.672" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.671" endtime="20200205 16:54:08.672"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.675" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.674" endtime="20200205 16:54:08.675"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:08.655" endtime="20200205 16:54:08.676"></status>
</kw>
<kw name="Json To String" library="JsonLibrary">
<doc>Serialize JSON structure into string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${json_String}</var>
</assign>
<msg timestamp="20200205 16:54:08.678" level="INFO">${json_String} = {"firstName": "John", "lastName": "doe", "age": 26, "gender": "male", "favoriteColor": ["blue", "black"], "isMarried": false, "address": {"streetAddress": "naist street", "city": "Dubai", "postalCode"...</msg>
<status status="PASS" starttime="20200205 16:54:08.677" endtime="20200205 16:54:08.679"></status>
</kw>
<kw name="Json Element Should Exist" library="JsonLibrary">
<doc>Check the existence of one or more elements, matching expression.</doc>
<arguments>
<arg>${json_String}</arg>
<arg>.address.streetAddress:contains("naist street")</arg>
</arguments>
<msg timestamp="20200205 16:54:08.681" level="INFO">Elements .address.streetAddress:contains("naist street") exist</msg>
<status status="PASS" starttime="20200205 16:54:08.680" endtime="20200205 16:54:08.681"></status>
</kw>
<doc>Check the existence of one or more elements, matching expression.</doc>
<status status="PASS" starttime="20200205 16:54:08.642" endtime="20200205 16:54:08.682" critical="yes"></status>
</test>
<test id="s1-s1-s1-t17" name="Json Element Should Not Exist">
<kw name="SetUp Test" type="setup">
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\example.json</arg>
</arguments>
<assign>
<var>${json_data}</var>
</assign>
<msg timestamp="20200205 16:54:08.688" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.686" endtime="20200205 16:54:08.688"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\SchemaString.json</arg>
</arguments>
<assign>
<var>${JsonSchema}</var>
</assign>
<msg timestamp="20200205 16:54:08.694" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.690" endtime="20200205 16:54:08.695"></status>
</kw>
<kw name="Load Json From File" library="JsonLibrary">
<doc>Loads Json data from file.</doc>
<arguments>
<arg>D:\\UFT_Project_Workspace\\JsonLibraryRobotTests\\JsonLibrary\\SampleData\\JsonSchemaExample.json</arg>
</arguments>
<assign>
<var>${Json_Schema_Data}</var>
</assign>
<msg timestamp="20200205 16:54:08.701" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.696" endtime="20200205 16:54:08.701"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${json_data}</arg>
<arg>${json_data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.704" level="INFO">${json_data} = OrderedDict([('firstName', 'John'), ('lastName', 'doe'), ('age', 26), ('gender', 'male'), ('favoriteColor', ['blue', 'black']), ('isMarried', False), ('address', OrderedDict([('streetAddress', 'naist ...</msg>
<status status="PASS" starttime="20200205 16:54:08.703" endtime="20200205 16:54:08.705"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${JsonSchema}</arg>
<arg>${JsonSchema}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.707" level="INFO">${JsonSchema} = OrderedDict([('properties', OrderedDict([('name', OrderedDict([('type', 'string')])), ('price', OrderedDict([('type', 'number'), ('minimum', 0)])), ('sku', OrderedDict([('description', 'Stock Keeping ...</msg>
<status status="PASS" starttime="20200205 16:54:08.706" endtime="20200205 16:54:08.708"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${Json_Schema_Data}</arg>
<arg>${Json_Schema_Data}</arg>
</arguments>
<msg timestamp="20200205 16:54:08.713" level="INFO">${Json_Schema_Data} = OrderedDict([('name', 'eggs'), ('price', 20)])</msg>
<status status="PASS" starttime="20200205 16:54:08.712" endtime="20200205 16:54:08.714"></status>
</kw>
<status status="PASS" starttime="20200205 16:54:08.684" endtime="20200205 16:54:08.715"></status>
</kw>
<kw name="Json To String" library="JsonLibrary">
<doc>Serialize JSON structure into string.</doc>
<arguments>
<arg>${json_data}</arg>
</arguments>
<assign>
<var>${json_String}</var>
</assign>
<msg timestamp="20200205 16:54:08.717" level="INFO">${json_String} = {"firstName": "John", "lastName": "doe", "age": 26, "gender": "male", "favoriteColor": ["blue", "black"], "isMarried": false, "address": {"streetAddress": "naist street", "city": "Dubai", "postalCode"...</msg>
<status status="PASS" starttime="20200205 16:54:08.716" endtime="20200205 16:54:08.718"></status>
</kw>
<kw name="Json Element Should Not Exist" library="JsonLibrary">
<doc>Check that one or more elements, matching expression, don't exist.</doc>
<arguments>
<arg>${json_String}</arg>
<arg>.address.streetAddress:contains("new york")</arg>
</arguments>
<msg timestamp="20200205 16:54:08.722" level="INFO">Elements .address.streetAddress:contains("new york") does not exist</msg>
<status status="PASS" starttime="20200205 16:54:08.720" endtime="20200205 16:54:08.722"></status>
</kw>
<doc>Check that one or more elements, matching expression, don't exist.</doc>
<status status="PASS" starttime="20200205 16:54:08.683" endtime="20200205 16:54:08.723" critical="yes"></status>
</test>
<status status="PASS" starttime="20200205 16:54:06.043" endtime="20200205 16:54:08.725"></status>
</suite>
<status status="PASS" starttime="20200205 16:54:06.038" endtime="20200205 16:54:08.733"></status>
</suite>
<status status="PASS" starttime="20200205 16:54:05.997" endtime="20200205 16:54:08.749"></status>
</suite>
<statistics>
<total>
<stat pass="17" fail="0">Critical Tests</stat>
<stat pass="17" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="17" fail="0" id="s1" name="JsonLibraryRobotTests">JsonLibraryRobotTests</stat>
<stat pass="17" fail="0" id="s1-s1" name="JsonLibrary">JsonLibraryRobotTests.JsonLibrary</stat>
<stat pass="17" fail="0" id="s1-s1-s1" name="JsonLibrary">JsonLibraryRobotTests.JsonLibrary.JsonLibrary</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
